package com.code.designpatternapp.data.impl.entities;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.code.designpatternapp.data.impl.entities.Address;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADDRESS".
*/
public class AddressDao extends AbstractDao<Address, Long> {

    public static final String TABLENAME = "ADDRESS";

    /**
     * Properties of entity Address.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Line1 = new Property(3, String.class, "line1", false, "LINE1");
        public final static Property Line2 = new Property(4, String.class, "line2", false, "LINE2");
        public final static Property State = new Property(5, String.class, "state", false, "STATE");
        public final static Property PinCode = new Property(6, String.class, "pinCode", false, "PIN_CODE");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property ServerId = new Property(8, Long.class, "serverId", false, "SERVER_ID");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
        public final static Property City = new Property(10, String.class, "city", false, "CITY");
        public final static Property AddressId = new Property(11, Long.class, "addressId", false, "ADDRESS_ID");
    };

    private DaoSession daoSession;

    private Query<Address> address_AddressListQuery;

    public AddressDao(DaoConfig config) {
        super(config);
    }
    
    public AddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADDRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"LINE1\" TEXT," + // 3: line1
                "\"LINE2\" TEXT," + // 4: line2
                "\"STATE\" TEXT," + // 5: state
                "\"PIN_CODE\" TEXT," + // 6: pinCode
                "\"PHONE\" TEXT," + // 7: phone
                "\"SERVER_ID\" INTEGER," + // 8: serverId
                "\"EMAIL\" TEXT," + // 9: email
                "\"CITY\" TEXT," + // 10: city
                "\"ADDRESS_ID\" INTEGER);"); // 11: addressId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADDRESS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Address entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String line1 = entity.getLine1();
        if (line1 != null) {
            stmt.bindString(4, line1);
        }
 
        String line2 = entity.getLine2();
        if (line2 != null) {
            stmt.bindString(5, line2);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(6, state);
        }
 
        String pinCode = entity.getPinCode();
        if (pinCode != null) {
            stmt.bindString(7, pinCode);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        Long serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindLong(9, serverId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
 
        Long addressId = entity.getAddressId();
        if (addressId != null) {
            stmt.bindLong(12, addressId);
        }
    }

    @Override
    protected void attachEntity(Address entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Address readEntity(Cursor cursor, int offset) {
        Address entity = new Address( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // line1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // line2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // state
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pinCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // serverId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // email
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // city
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // addressId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Address entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLine1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLine2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPinCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setServerId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddressId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Address entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Address entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "addressList" to-many relationship of Address. */
    public List<Address> _queryAddress_AddressList(Long addressId) {
        synchronized (this) {
            if (address_AddressListQuery == null) {
                QueryBuilder<Address> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AddressId.eq(null));
                address_AddressListQuery = queryBuilder.build();
            }
        }
        Query<Address> query = address_AddressListQuery.forCurrentThread();
        query.setParameter(0, addressId);
        return query.list();
    }

}
